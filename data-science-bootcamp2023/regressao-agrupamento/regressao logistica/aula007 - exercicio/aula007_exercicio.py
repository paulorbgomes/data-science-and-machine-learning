# -*- coding: utf-8 -*-
"""aula007_exercicio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11BOgfhJctK_CosE-0ABlAhZjDgxGHN94
"""

# Bibliotecas
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
import seaborn as sns
sns.set()

from scipy import stats
stats.chisqprob = lambda chisq, df: stats.chi2.sf(chisq, df)

# Dados
raw_data = pd.read_csv("Bank-data.csv")
raw_data
data = raw_data.copy()
data = data.drop(["Unnamed: 0"], axis = 1)
data["y"] = data["y"].map({"yes":1, "no":0})
data
data.describe()

# Variáveis Dependentes e Independentes
y = data["y"]
x1 = data["duration"]

# Regressão Logística Simples
x = sm.add_constant(x1)
results = sm.Logit(y,x).fit()
results.summary()

# Visualização dos Dados
plt.scatter(x1,y,color="C0")
plt.xlabel('Duration', fontsize = 20)
plt.ylabel('Subscription', fontsize = 20)
plt.show()

# Regressão Logística Múltipla
estimators=['interest_rate','march','credit','previous','duration']
x1 = data[estimators]
y = data["y"]

x = sm.add_constant(x1)
results = sm.Logit(y,x).fit()
results.summary()

# Matriz de Confusão
def confusion_matrix(data,actual_values,model):
  pred_values = model.predict(data)
  bins=np.array([0,0.5,1])
  cm = np.histogram2d(actual_values, pred_values, bins=bins)[0]
  accuracy = (cm[0,0]+cm[1,1])/cm.sum()
  return cm, accuracy

confusion_matrix(x,y,results)