# -*- coding: utf-8 -*-
"""regressao_linear_multipla.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1okd_khEdBw6aQNJ300ElfxVqRZZ8rTEJ
"""

# Bibliotecas
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm

# Dataset
dataset = pd.read_csv("startups.csv")
X = dataset.iloc[:,:-1].values
Y = dataset.iloc[:,4].values

# Codificando a variável categórica de estado
columnTransformer = ColumnTransformer([("encoder", OneHotEncoder(), [3])], remainder="passthrough")
X = np.array(columnTransformer.fit_transform(X), dtype=np.float64)
X = X[:,1:]

# Divisão do dataset em treino e teste
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)

# Regressão linear múltipla
regressor = LinearRegression()
regressor.fit(X_train, Y_train)

# Predição
Y_pred = regressor.predict(X_test)
for k in range(len(Y_test)):
  Y_teste = Y_test[k]
  Y_previsto = Y_pred[k]
  erro = abs((Y_test[k] - Y_pred[k]) / Y_pred[k] * 100)
  print(f"Y_test: {Y_teste:.2f}. Y_previsto: {Y_previsto:.2f}. Erro: {erro:.2f}")

# Verificando a significância estatística das variáveis
X_opt = X[:,[0, 1, 2, 3, 4]]
regressor_OLS = sm.OLS(Y, X_opt).fit()
regressor_OLS.summary()
regressor_OLS.pvalues

# Verificando a significância estatística das variáveis
X_opt = X[:,[2, 3, 4]]
regressor_OLS = sm.OLS(Y, X_opt).fit()
regressor_OLS.summary()
regressor_OLS.pvalues

# Verificando a significância estatística das variáveis
X_opt = X[:,[2, 3]]
regressor_OLS = sm.OLS(Y, X_opt).fit()
regressor_OLS.summary()
regressor_OLS.pvalues